module.exports.config = {
  name: "cmd",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж",
  description: "ржмржЯрзЗрж░ рж╕ржм ржХржорж╛ржирзНржб ржЪрж╛рж▓рзБ/ржмржирзНржз ржХрж░рзБржи",
  commandCategory: "рж╕рж┐рж╕рзНржЯрзЗржо",
  usages: "[load/unload/loadAll/unloadAll/info/count] [moduleName]",
  cooldowns: 2,
  dependencies: {
    "fs-extra": "",
    "child_process": "",
    "path": ""
  }
};

const loadCommand = ({ moduleList, threadID, messageID, api }) => {
  const { writeFileSync, unlinkSync } = global.nodemodule["fs-extra"];
  const { configPath, mainPath } = global.client;
  const logger = require(mainPath + "/utils/log");

  const errorList = [];
  delete require.cache[require.resolve(configPath)];
  const configValue = require(configPath);
  writeFileSync(configPath + ".temp", JSON.stringify(configValue, null, 2), "utf8");

  for (const nameModule of moduleList) {
    try {
      const dirModule = __dirname + "/" + nameModule + ".js";
      delete require.cache[require.resolve(dirModule)];
      const command = require(dirModule);
      global.client.commands.delete(nameModule);

      if (!command.config || !command.run || !command.config.commandCategory)
        throw new Error("ржлрж░ржорзНржпрж╛ржЯ ржарж┐ржХ ржирзЗржЗ!");

      global.client.eventRegistered = global.client.eventRegistered.filter(info => info !== command.config.name);
      global.client.commands.set(command.config.name, command);
      logger.loader("рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ тЖТ " + command.config.name);
    } catch (error) {
      errorList.push(`- ${nameModule}: ${error.message}`);
    }
  }

  if (errorList.length > 0) {
    api.sendMessage("тЭМ ржирж┐ржЪрзЗрж░ ржоржбрж┐ржЙрж▓ рж▓рзЛржб ржХрж░рждрзЗ ржмрзНржпрж░рзНрже:\n" + errorList.join("\n"), threadID, messageID);
  } else {
    api.sendMessage("тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣рж▓рзЛ:\n" + moduleList.join(", "), threadID, messageID);
  }

  writeFileSync(configPath, JSON.stringify(configValue, null, 4), "utf8");
  unlinkSync(configPath + ".temp");
};

const unloadModule = ({ moduleList, threadID, messageID, api }) => {
  const { writeFileSync, unlinkSync } = global.nodemodule["fs-extra"];
  const { configPath, mainPath } = global.client;
  const logger = require(mainPath + "/utils/log").loader;

  delete require.cache[require.resolve(configPath)];
  const configValue = require(configPath);
  writeFileSync(configPath + ".temp", JSON.stringify(configValue, null, 4), "utf8");

  for (const nameModule of moduleList) {
    global.client.commands.delete(nameModule);
    global.client.eventRegistered = global.client.eventRegistered.filter(item => item !== nameModule);
    configValue["commandDisabled"].push(`${nameModule}.js`);
    global.config["commandDisabled"].push(`${nameModule}.js`);
    logger(`ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛ тЖТ ${nameModule}`);
  }

  writeFileSync(configPath, JSON.stringify(configValue, null, 4), "utf8");
  unlinkSync(configPath + ".temp");
  api.sendMessage(`ЁЯЫС ${moduleList.length}ржЯрж┐ ржХржорж╛ржирзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред`, threadID, messageID);
};

module.exports.run = async function ({ event, args, api }) {
  const OWNER_ID = "100035389598342";
  const { readdirSync } = global.nodemodule["fs-extra"];
  const { threadID, messageID, senderID } = event;

  if (senderID !== OWNER_ID)
    return api.sendMessage("тЭМ ржЖржкржирж┐ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржкрж╛ржиржирж┐, ржнрж╛ржЗред", threadID, messageID);

  let moduleList = args.slice(1);

  switch (args[0]) {
    case "count": {
      return api.sendMessage(`ЁЯУК ржорзЛржЯ рж▓рзЛржб ржХрж░рж╛ ржХржорж╛ржирзНржб рж╕ржВржЦрзНржпрж╛: ${global.client.commands.size}`, threadID, messageID);
    }
    case "load": {
      if (moduleList.length === 0) return api.sendMessage("тЪая╕П ржХрзЛржи ржоржбрж┐ржЙрж▓рзЗрж░ ржирж╛ржо ржжрзЗржиржирж┐!", threadID, messageID);
      return loadCommand({ moduleList, threadID, messageID, api });
    }
    case "unload": {
      if (moduleList.length === 0) return api.sendMessage("тЪая╕П ржХрзЛржи ржоржбрж┐ржЙрж▓рзЗрж░ ржирж╛ржо ржжрзЗржиржирж┐!", threadID, messageID);
      return unloadModule({ moduleList, threadID, messageID, api });
    }
    case "loadAll": {
      moduleList = readdirSync(__dirname).filter(file => file.endsWith(".js") && !file.includes("example") && !file.includes("cmd"));
      moduleList = moduleList.map(file => file.replace(/\.js$/, ""));
      return loadCommand({ moduleList, threadID, messageID, api });
    }
    case "unloadAll": {
      moduleList = readdirSync(__dirname).filter(file => file.endsWith(".js") && !file.includes("example") && !file.includes("cmd"));
      moduleList = moduleList.map(file => file.replace(/\.js$/, ""));
      return unloadModule({ moduleList, threadID, messageID, api });
    }
    case "info": {
      const cmd = global.client.commands.get(moduleList.join("") || "");
      if (!cmd) return api.sendMessage("тЭМ ржЙрж▓рзНрж▓рж┐ржЦрж┐ржд ржХржорж╛ржирзНржб ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!", threadID, messageID);
      const { name, version, hasPermssion, credits, cooldowns, dependencies } = cmd.config;

      return api.sendMessage(
        `ЁЯУж ржХржорж╛ржирзНржб: ${name}\n` +
        `тЬНя╕П ржирж┐рж░рзНржорж╛рждрж╛: ${credits}\n` +
        `ЁЯМА ржнрж╛рж░рзНрж╕ржи: ${version}\n` +
        `ЁЯЫбя╕П ржкрж╛рж░ржорж┐рж╢ржи: ${hasPermssion == 0 ? "рж╕рж╛ржзрж╛рж░ржг ржЗржЙржЬрж╛рж░" : hasPermssion == 1 ? "ржЕрзНржпрж╛ржбржорж┐ржи" : "рж╕рж╛ржкрзЛрж░рзНржЯ/ржорж╛рж╕рзНржЯрж╛рж░"}\n` +
        `тП▒я╕П ржХрзБрж▓ржбрж╛ржЙржи: ${cooldowns}s\n` +
        `ЁЯУЪ ржбрж┐ржкрзЗржирзНржбрзЗржирзНрж╕рж┐: ${(Object.keys(dependencies || {})).join(", ") || "ржХрж┐ржЫрзБ ржирзЗржЗ"}`,
        threadID, messageID
      );
    }
    default: {
      return api.sendMessage("тЭУ ржХржорж╛ржирзНржбржЯрж┐ рж╕ржарж┐ржХ ржирзЯ!\nржЙржжрж╛рж╣рж░ржг: cmd load [ржирж╛ржо], cmd unloadAll", threadID, messageID);
    }
  }
};
