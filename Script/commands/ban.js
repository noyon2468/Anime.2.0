const fs = require("fs-extra");

module.exports.config = {
  name: "ban",
  version: "2.1.0",
  hasPermssion: 0,
  credits: "‡¶®‡ßÇ‡¶∞ ‡¶Æ‡ßã‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ",
  description: "‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶ï‡ßá ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßã",
  commandCategory: "group",
  usages: "[tag]/[reply]/view/unban/listban/reset",
  cooldowns: 5
};

module.exports.run = async function({ api, args, Users, event, Threads, utils }) {
  const { threadID, messageID, senderID, mentions } = event;

  const filePath = `${__dirname}/cache/bans.json`;

  // ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, JSON.stringify({ warns: {}, banned: {} }, null, 2));
  }

  const bans = JSON.parse(fs.readFileSync(filePath));
  if (!bans.warns[threadID]) bans.warns[threadID] = {};
  if (!bans.banned[threadID]) bans.banned[threadID] = [];

  const save = () => fs.writeFileSync(filePath, JSON.stringify(bans, null, 2));

  const isAdmin = (await api.getThreadInfo(threadID)).adminIDs.some(i => i.id === senderID)
    || global.config.ADMINBOT.includes(senderID);

  if (!isAdmin) return api.sendMessage("‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§", threadID, messageID);

  // üîç View warn
  if (args[0] === "view") {
    let msg = "";

    if (Object.keys(mentions).length > 0) {
      for (let id of Object.keys(mentions)) {
        const name = (await api.getUserInfo(id))[id].name;
        const reasons = bans.warns[threadID][id] || [];
        if (reasons.length === 0) msg += `üî∏ ${name} ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶æ‡ßü‡¶®‡¶ø‡•§\n`;
        else msg += `‚ö†Ô∏è ${name} ‡¶è‡¶∞ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶®:\n- ${reasons.join("\n- ")}\n\n`;
      }
    } else {
      const reasons = bans.warns[threadID][senderID] || [];
      if (reasons.length === 0) return api.sendMessage("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶™‡¶æ‡¶®‡¶®‡¶ø‡•§", threadID, messageID);
      msg = `‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶®:\n- ${reasons.join("\n- ")}`;
    }

    return api.sendMessage(msg, threadID, messageID);
  }

  // üìã List banned users
  if (args[0] === "listban") {
    const list = bans.banned[threadID];
    if (list.length === 0) return api.sendMessage("‚úÖ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§", threadID, messageID);

    let msg = "‚ùå ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶ï‡ßÉ‡¶§ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø:\n";
    for (let uid of list) {
      const name = (await api.getUserInfo(uid))[uid]?.name || uid;
      msg += `üîπ ${name} (UID: ${uid})\n`;
    }
    return api.sendMessage(msg, threadID, messageID);
  }

  // üîì Unban
  if (args[0] === "unban") {
    const uid = args[1];
    if (!uid) return api.sendMessage("‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶≤‡¶§‡ßá UID ‡¶¶‡¶ø‡¶®‡•§", threadID, messageID);

    const list = bans.banned[threadID];
    if (!list.includes(uid)) return api.sendMessage("‚úÖ ‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§", threadID, messageID);

    list.splice(list.indexOf(uid), 1);
    delete bans.warns[threadID][uid];
    save();
    return api.sendMessage(`‚úÖ ${uid} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§`, threadID, messageID);
  }

  // üßπ Reset all
  if (args[0] === "reset") {
    bans.warns[threadID] = {};
    bans.banned[threadID] = [];
    save();
    return api.sendMessage("üîÑ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", threadID, messageID);
  }

  // ‚ö†Ô∏è Warn/Ban someone
  const idWarn = [];

  // From reply
  if (event.type === "message_reply") {
    idWarn.push(event.messageReply.senderID);
  }
  // From tag
  else if (Object.keys(mentions).length > 0) {
    idWarn.push(...Object.keys(mentions));
  } else {
    return api.sendMessage("‚ö†Ô∏è ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶≤‡ßá ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡¶æ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
  }

  let reason = args.join(" ").replace(/"/g, "").trim();
  if (!reason) reason = "‡¶ï‡¶æ‡¶∞‡¶£ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§";

  const tagList = [];
  const nameList = [];

  for (let uid of idWarn) {
    const name = (await api.getUserInfo(uid))[uid].name;
    tagList.push({ id: uid, tag: name });
    nameList.push(name);

    if (!bans.warns[threadID][uid]) bans.warns[threadID][uid] = [];
    bans.warns[threadID][uid].push(reason);

    if (bans.warns[threadID][uid].length >= 2 && !bans.banned[threadID].includes(uid)) {
      bans.banned[threadID].push(uid);
      try {
        await api.removeUserFromGroup(uid, threadID);
      } catch (e) {
        api.sendMessage(`‚ö†Ô∏è ${name} ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`, threadID);
      }
    }
  }

  save();
  return api.sendMessage(
    {
      body: `‚ùå ${nameList.join(", ")} ‡¶ï‡ßá ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\nüìù ‡¶ï‡¶æ‡¶∞‡¶£: ${reason}`,
      mentions: tagList
    },
    threadID,
    messageID
  );
};
