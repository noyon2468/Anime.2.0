const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
  name: "approve",
  version: "1.0.2",
  hasPermssion: 2,
  credits: "ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж + ChatGPT",
  description: "ржЕржирзБржорзЛржжрж┐ржд ржерзНрж░рзЗржб ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзБржи",
  commandCategory: "admin",
  cooldowns: 5
};

const dataDir = __dirname + "/cache/ullash/";
const dataPath = dataDir + "approvedThreads.json";
const pendingPath = dataDir + "pendingThreads.json";

module.exports.onLoad = () => {
  if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir);
  if (!fs.existsSync(dataPath)) fs.writeFileSync(dataPath, JSON.stringify([]));
  if (!fs.existsSync(pendingPath)) fs.writeFileSync(pendingPath, JSON.stringify([]));
};

module.exports.run = async function ({ event, api, args, Threads, handleReply, Users }) {
  const { threadID, messageID, senderID } = event;

  let approvedThreads = JSON.parse(fs.readFileSync(dataPath));
  let pendingThreads = JSON.parse(fs.readFileSync(pendingPath));

  const subcommand = args[0];
  const id = args[1] || threadID;

  // Show Approved List
  if (subcommand === "list" || subcommand === "l") {
    let msg = `тЬЕ ржЕржирзБржорзЛржжрж┐ржд ржЧрзНрж░рзБржкрзЗрж░ рждрж╛рж▓рж┐ржХрж╛:\n\n`;
    let index = 1;
    for (const tid of approvedThreads) {
      const info = await api.getThreadInfo(tid);
      const name = info.threadName || (await Users.getNameUser(tid));
      msg += `${index++}. ${name}\nID: ${tid}\n\n`;
    }
    return api.sendMessage(msg || "тЬЕ ржХрзЛржирзЛ ржЕржирзБржорзЛржжрж┐ржд ржЧрзНрж░рзБржк ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", threadID, messageID);
  }

  // Show Pending List
  if (subcommand === "pending" || subcommand === "p") {
    let msg = `ЁЯФХ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖ржорж╛ржг рждрж╛рж▓рж┐ржХрж╛:\n\n`;
    let index = 1;
    for (const tid of pendingThreads) {
      const info = await api.getThreadInfo(tid);
      const name = info.threadName || (await Users.getNameUser(tid));
      msg += `${index++}. ${name}\nID: ${tid}\n\n`;
    }
    return api.sendMessage(msg || "ЁЯФХ ржХрзЛржирзЛ pending ржЧрзНрж░рзБржк ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", threadID, messageID);
  }

  // Help Command
  if (subcommand === "help" || subcommand === "h") {
    return api.sendMessage(
      `ЁЯУЪ Approve Command Menu:\n\n` +
      `тЮд approve [ID] - ржЧрзНрж░рзБржк ржЕржирзБржорзЛржжржи\n` +
      `тЮд approve list / l - ржЕржирзБржорзЛржжрж┐ржд ржЧрзНрж░рзБржк рждрж╛рж▓рж┐ржХрж╛\n` +
      `тЮд approve pending / p - pending рждрж╛рж▓рж┐ржХрж╛\n` +
      `тЮд approve del [ID] - ржЕржирзБржорзЛржжржи ржорзБржЫрзБржи\n\n` +
      `Example: approve 123456789`,
      threadID,
      messageID
    );
  }

  // Delete Approved Thread
  if (subcommand === "del" || subcommand === "d") {
    if (!approvedThreads.includes(id)) {
      return api.sendMessage("тЭМ ржПржЗ ржЧрзНрж░рзБржкржЯрж┐ ржЕржирзБржорзЛржжрж┐ржд рждрж╛рж▓рж┐ржХрж╛рзЯ ржирзЗржЗред", threadID, messageID);
    }
    approvedThreads = approvedThreads.filter(e => e !== id);
    fs.writeFileSync(dataPath, JSON.stringify(approvedThreads, null, 2));
    return api.sendMessage(`тЭО ID: ${id} рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжржи рждрж╛рж▓рж┐ржХрж╛ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗред`, threadID, messageID);
  }

  // Approve New Thread
  if (!approvedThreads.includes(id)) {
    approvedThreads.push(id);
    fs.writeFileSync(dataPath, JSON.stringify(approvedThreads, null, 2));

    pendingThreads = pendingThreads.filter(e => e !== id);
    fs.writeFileSync(pendingPath, JSON.stringify(pendingThreads, null, 2));

    return api.sendMessage(`тЬЕ ржЧрзНрж░рзБржк ржЕржирзБржорзЛржжрж┐ржд рж╣рзЯрзЗржЫрзЗ!\nID: ${id}`, threadID, messageID);
  } else {
    return api.sendMessage("тЬЕ ржПржЗ ржЧрзНрж░рзБржк ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржЕржирзБржорзЛржжрж┐рждред", threadID, messageID);
  }
};
