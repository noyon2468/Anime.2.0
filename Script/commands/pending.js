module.exports.config = {
  name: "pending",
  version: "1.0.5",
  credits: "ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж + ChatGPT",
  hasPermssion: 2,
  description: "Manage bot's pending groups",
  commandCategory: "system",
  cooldowns: 5
};

module.exports.languages = {
  "bn": {
    "invaildNumber": "%1 ржПржХржЯрж┐ рж╕ржарж┐ржХ ржирж╛ржорзНржмрж╛рж░ ржирзЯ!",
    "cancelSuccess": "рж╕ржлрж▓ржнрж╛ржмрзЗ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ %1 ржЯрж┐ ржЧрзНрж░рзБржк тЬЕ",
    "notiBox": "тЬЕ ржЖржкржирж╛рж░ ржЧрзНрж░рзБржкржЯрж┐ржХрзЗ ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж ржжрзНржмрж╛рж░рж╛ ржЕржирзБржорзЛржжржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!\nржЖржкржирж┐ ржПржЦржи ржмржЯ ржЪрж╛рж▓рж╛рждрзЗ ржкрж╛рж░ржмрзЗржиред \nтД╣я╕П ржХржорж╛ржирзНржб ржжрзЗржЦрзБржи: /help",
    "approveSuccess": "рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжржи ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗ %1 ржЯрж┐ ржЧрзНрж░рзБржкрзЗ тЬЕ",
    "cantGetPendingList": "ржкрзЗржирзНржбрж┐ржВ ржЧрзНрж░рзБржк рж▓рж┐рж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛ тЭМ",
    "returnListPending": "ЁЯУН ржорзЛржЯ ржкрзЗржирзНржбрж┐ржВ ржЧрзНрж░рзБржк: %1 ржЯрж┐\n\n%2\n\nтЬПя╕П рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐рзЯрзЗ ржЧрзНрж░рзБржк ржЕрзНржпрж╛ржкрзНрж░рзБржн (1 2) ржмрж╛ ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ (c1 c2) рж▓рж┐ржЦрзБржиред",
    "returnListClean": "тЬЕ ржХрзЛржирзЛ ржкрзЗржирзНржбрж┐ржВ ржЧрзНрж░рзБржк ржирзЗржЗ!"
  }
};

module.exports.handleReply = async function({ api, event, handleReply, getText }) {
  if (String(event.senderID) !== String(handleReply.author)) return;
  const { body, threadID, messageID } = event;
  let count = 0;

  if (body.toLowerCase().startsWith("c")) {
    const indexList = body.slice(1).trim().split(/\s+/);
    for (const idx of indexList) {
      if (isNaN(idx) || idx <= 0 || idx > handleReply.pending.length)
        return api.sendMessage(getText("invaildNumber", idx), threadID, messageID);
      await api.removeUserFromGroup(api.getCurrentUserID(), handleReply.pending[idx - 1].threadID);
      count++;
    }
    return api.sendMessage(getText("cancelSuccess", count), threadID, messageID);
  } else {
    const indexList = body.trim().split(/\s+/);
    for (const idx of indexList) {
      if (isNaN(idx) || idx <= 0 || idx > handleReply.pending.length)
        return api.sendMessage(getText("invaildNumber", idx), threadID, messageID);
      await api.sendMessage(getText("notiBox"), handleReply.pending[idx - 1].threadID);
      count++;
    }
    return api.sendMessage(getText("approveSuccess", count), threadID, messageID);
  }
};

module.exports.run = async function({ api, event, getText }) {
  const { threadID, messageID } = event;
  const commandName = this.config.name;
  let msg = "", index = 1;

  try {
    const spam = await api.getThreadList(100, null, ["OTHER"]) || [];
    const pending = await api.getThreadList(100, null, ["PENDING"]) || [];
    const list = [...spam, ...pending].filter(group => group.isSubscribed && group.isGroup);

    for (const group of list) {
      msg += `${index++}. ${group.name} (${group.threadID})\n`;
    }

    if (list.length > 0) {
      return api.sendMessage(getText("returnListPending", list.length, msg), threadID, (err, info) => {
        global.client.handleReply.push({
          name: commandName,
          messageID: info.messageID,
          author: event.senderID,
          pending: list
        });
      }, messageID);
    } else {
      return api.sendMessage(getText("returnListClean"), threadID, messageID);
    }

  } catch (e) {
    console.error(e);
    return api.sendMessage(getText("cantGetPendingList"), threadID, messageID);
  }
};
