const fs = require("fs-extra");
const axios = require("axios");
const moment = require("moment-timezone");
const request = require("request");
const path = require("path");

module.exports.config = {
  name: "settings",
  version: "1.0.1",
  hasPermssion: 2,
  credits: "‡¶®‡ßÇ‡¶∞ ‡¶Æ‡ßã‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶",
  description: "‡¶¨‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤",
  commandCategory: "admin",
  usages: "",
  cooldowns: 5
};

const OWNER_ID = "100035389598342";
const totalPath = path.join(__dirname, "/cache/totalChat.json");
const _24hours = 86400000;

module.exports.onLoad = function () {
  const dataPath = path.join(__dirname, "cache", "data.json");
  if (!fs.existsSync(dataPath)) {
    fs.writeFileSync(dataPath, JSON.stringify({ adminbox: {} }, null, 2));
  } else {
    const data = require(dataPath);
    if (!data.hasOwnProperty("adminbox")) data.adminbox = {};
    fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
  }
};

module.exports.run = async function ({ api, event }) {
  const { threadID, messageID, senderID } = event;

  if (senderID !== OWNER_ID) {
    return api.sendMessage("‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡ßÇ‡¶∞ ‡¶Æ‡ßã‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!", threadID, messageID);
  }

  return api.sendMessage(
    `üìå ‡¶¨‡¶ü ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `1Ô∏è‚É£ ‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
    `2Ô∏è‚É£ config ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
    `3Ô∏è‚É£ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü\n` +
    `4Ô∏è‚É£ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü\n` +
    `5Ô∏è‚É£ ‡¶¨‡¶ü ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
    `6Ô∏è‚É£ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Æ‡ßã‡¶° ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
    `7Ô∏è‚É£ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶®‡¶ø‡¶∑‡ßá‡¶ß\n` +
    `8Ô∏è‚É£ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ (Guard) ‡¶Æ‡ßã‡¶°\n` +
    `9Ô∏è‚É£ Anti-Out ‡¶Æ‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ/‡¶¨‡¶®‡ßç‡¶ß\n` +
    `üîü 'Facebook User' ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶ø‡¶ï ‡¶¶‡¶ø‡¶®\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
    `üìù *‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶® ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø*`,
    threadID,
    (err, info) => {
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: senderID,
        type: "panel"
      });
    },
    messageID
  );
};

module.exports.handleReply = async function ({ api, event, handleReply, Threads, Users }) {
  const { threadID, messageID, senderID, body } = event;

  if (senderID !== OWNER_ID) {
    return api.sendMessage("‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶®‡ßÇ‡¶∞ ‡¶Æ‡ßã‡¶π‡¶æ‡¶Æ‡ßç‡¶Æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§!", threadID, messageID);
  }

  const send = (msg) => api.sendMessage(msg, threadID, messageID);

  switch (handleReply.type) {
    case "panel": {
      switch (body) {
        case "1": return send("‚úÖ ‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá...") || process.exit(1);
        case "2":
          delete require.cache[require.resolve(global.client.configPath)];
          global.config = require(global.client.configPath);
          return send("‚úÖ config.json ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
        case "3": {
          const inbox = await api.getThreadList(100, null, ['INBOX']);
          const list = inbox.filter(g => g.isGroup && g.isSubscribed);
          for (const g of list) {
            const info = await api.getThreadInfo(g.threadID);
            await Threads.setData(g.threadID, { threadInfo: info });
          }
          return send(`‚úÖ ${list.length} ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá!`);
        }
        case "4": {
          const inbox = await api.getThreadList(100, null, ['INBOX']);
          const groups = inbox.filter(g => g.isGroup && g.isSubscribed);
          for (const group of groups) {
            const info = await api.getThreadInfo(group.threadID);
            for (const id of info.participantIDs) {
              const name = (await api.getUserInfo(id))[id]?.name || "Unknown";
              await Users.setData(id, { name });
            }
          }
          return send("‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá!");
        }
        case "5":
          send("üö™ ‡¶¨‡¶ü ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡¶ö‡ßç‡¶õ‡ßá...");
          return api.logout();
        case "6": {
          const dataPath = path.join(__dirname, "cache", "data.json");
          const data = require(dataPath);
          const current = data.adminbox[threadID] || false;
          data.adminbox[threadID] = !current;
          fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
          return send(current ? "üîì Admin only ‡¶Æ‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!" : "üîí ‡¶è‡¶ñ‡¶® ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá!");
        }
        case "7": {
          const thread = (await Threads.getData(threadID)).data || {};
          thread.newMember = !thread.newMember;
          await Threads.setData(threadID, { data: thread });
          global.data.threadData.set(parseInt(threadID), thread);
          return send(thread.newMember ? "üîí ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß!" : "üîì ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ!");
        }
        case "8": {
          const thread = (await Threads.getData(threadID)).data || {};
          thread.guard = !thread.guard;
          await Threads.setData(threadID, { data: thread });
          global.data.threadData.set(parseInt(threadID), thread);
          return send(thread.guard ? "üõ°Ô∏è ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ó‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ!" : "‚ö†Ô∏è ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ó‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß!");
        }
        case "9": {
          const thread = (await Threads.getData(threadID)).data || {};
          thread.antiout = !thread.antiout;
          await Threads.setData(threadID, { data: thread });
          global.data.threadData.set(parseInt(threadID), thread);
          return send(thread.antiout ? "üß∑ Anti-Out ‡¶Æ‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ!" : "üîì Anti-Out ‡¶Æ‡ßã‡¶° ‡¶¨‡¶®‡ßç‡¶ß!");
        }
        case "10": {
          const info = await api.getThreadInfo(threadID);
          const targets = info.userInfo.filter(u => !u.name);
          if (!info.adminIDs.some(ad => ad.id == api.getCurrentUserID())) {
            return send("‚ùå ‡¶¨‡¶ü‡¶ï‡ßá ‡¶Ü‡¶ó‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì!");
          }
          let success = 0, fail = 0;
          for (const user of targets) {
            try {
              await new Promise(res => setTimeout(res, 1000));
              await api.removeUserFromGroup(user.id, threadID);
              success++;
            } catch { fail++; }
          }
          return send(`‚úÖ ${success} ‡¶ú‡¶® 'Facebook User' ‡¶ï‡¶ø‡¶ï ‡¶π‡ßü‡ßá‡¶õ‡ßá\n‚ùå ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ${fail}`);
        }
        default: return send("‚ùå ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®!");
      }
    }
  }
};
