const axios = require("axios");
const fs = require('fs');

const baseApiUrl = async () => {
  const base = await axios.get("https://raw.githubusercontent.com/Blankid018/D1PT0/main/baseApiUrl.json");
  return base.data.api;
};

module.exports = {
  config: {
    name: "youtube",
    version: "1.1.5",
    credits: "Nur Muhammad + ChatGPT",
    countDown: 5,
    hasPermssion: 0,
    description: "‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì/‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
    commandCategory: "media",
    usePrefix: true,
    prefix: true,
    usages: "youtube -v/-a/-i [‡¶≤‡¶ø‡¶Ç‡¶ï/‡¶®‡¶æ‡¶Æ]",
  },

  run: async ({ api, args, event }) => {
    const { threadID, messageID, senderID } = event;

    if (!args[0])
      return api.sendMessage("‚ùå ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡¶ø‡¶®: -v (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì), -a (‡¶Ö‡¶°‡¶ø‡¶ì), -i (‡¶á‡¶®‡¶´‡ßã)", threadID, messageID);
    const action = args[0].toLowerCase();

    const ytRegex = /(?:youtu\.be\/|youtube\.com\/(?:watch\?v=|shorts\/|embed\/|v\/))([\w-]{11})/;
    const urlValid = args[1] ? ytRegex.test(args[1]) : false;

    if (urlValid) {
      const format = ['-v', 'video', 'mp4'].includes(action) ? 'mp4'
        : ['-a', 'audio', 'mp3'].includes(action) ? 'mp3' : null;
      if (!format) return api.sendMessage("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü! -v (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì), -a (‡¶Ö‡¶°‡¶ø‡¶ì)", threadID, messageID);

      const match = args[1].match(ytRegex);
      const videoID = match[1];
      const path = `ytb_${format}_${videoID}.${format}`;

      try {
        const { data: { title, downloadLink, quality } } = await axios.get(`${await baseApiUrl()}/ytDl3?link=${videoID}&format=${format}&quality=3`);
        await api.sendMessage({
          body: `üé¨ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤: ${title}\nüì• ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø: ${quality}`,
          attachment: await downloadFile(downloadLink, path)
        }, threadID, () => fs.unlinkSync(path), messageID);
      } catch (err) {
        console.error(err);
        return api.sendMessage("‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá!", threadID, messageID);
      }

      return;
    }

    args.shift();
    const keyword = args.join(" ");
    if (!keyword) return api.sendMessage("‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡ßÄ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®!", threadID, messageID);

    try {
      const results = (await axios.get(`${await baseApiUrl()}/ytFullSearch?songName=${encodeURIComponent(keyword)}`)).data.slice(0, 6);
      if (!results.length) return api.sendMessage(`üîç ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: ${keyword}`, threadID, messageID);

      let msg = "üîé ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü:\n\n";
      const thumbs = [];

      for (let i = 0; i < results.length; i++) {
        const vid = results[i];
        msg += `${i + 1}. ${vid.title}\n‚è± ‡¶∏‡¶Æ‡ßü: ${vid.time}\nüì∫ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: ${vid.channel.name}\n\n`;
        thumbs.push(streamImage(vid.thumbnail, `thumb_${i + 1}.jpg`));
      }

      return api.sendMessage({
        body: msg + "üëâ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø!",
        attachment: await Promise.all(thumbs)
      }, threadID, (err, info) => {
        if (err) return console.error(err);
        global.client.handleReply.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: senderID,
          result: results,
          action
        });
      }, messageID);

    } catch (err) {
      console.error(err);
      return api.sendMessage("‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá!", threadID, messageID);
    }
  },

  handleReply: async ({ event, api, handleReply }) => {
    const { threadID, messageID, senderID, body } = event;
    if (senderID !== handleReply.author) return;

    const { result, action } = handleReply;
    const choice = parseInt(body);
    if (isNaN(choice) || choice <= 0 || choice > result.length)
      return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®!", threadID, messageID);

    const selected = result[choice - 1];
    const videoID = selected.id;
    const format = ['-v', 'video', 'mp4'].includes(action) ? 'mp4'
      : ['-a', 'audio', 'mp3'].includes(action) ? 'mp3' : null;

    if (format) {
      const path = `ytb_${format}_${videoID}.${format}`;
      try {
        const { data: { title, downloadLink, quality } } = await axios.get(`${await baseApiUrl()}/ytDl3?link=${videoID}&format=${format}&quality=3`);
        await api.sendMessage({
          body: `üéûÔ∏è ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤: ${title}\nüì• ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø: ${quality}`,
          attachment: await downloadFile(downloadLink, path)
        }, threadID, () => fs.unlinkSync(path), messageID);
      } catch (e) {
        console.error(e);
        return api.sendMessage('‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!', threadID, messageID);
      }
    }

    if (action === '-i' || action === 'info') {
      try {
        const { data } = await axios.get(`${await baseApiUrl()}/ytfullinfo?videoID=${videoID}`);
        await api.sendMessage({
          body: `üé¨ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤: ${data.title}\n‚è≥ ‡¶∏‡¶Æ‡ßü: ${(data.duration / 60).toFixed(2)} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü\nüì∫ ‡¶∞‡ßá‡¶ú‡ßÅ‡¶≤‡ßá‡¶∂‡¶®: ${data.resolution}\nüëÄ ‡¶≠‡¶ø‡¶â: ${data.view_count}\nüëç ‡¶≤‡¶æ‡¶á‡¶ï: ${data.like_count}\nüí¨ ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø: ${data.comment_count}\nüìÇ ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó: ${data.categories[0]}\nüì¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤: ${data.channel}\nüîó ‡¶≤‡¶ø‡¶Ç‡¶ï: ${data.webpage_url}`,
          attachment: await streamImage(data.thumbnail, 'info_thumb.jpg')
        }, threadID, messageID);
      } catch (e) {
        console.error(e);
        return api.sendMessage('‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶á‡¶®‡¶´‡ßã ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!', threadID, messageID);
      }
    }
  }
};

async function downloadFile(url, pathName) {
  const res = await axios.get(url, { responseType: "arraybuffer" });
  fs.writeFileSync(pathName, Buffer.from(res.data));
  return fs.createReadStream(pathName);
}

async function streamImage(url, pathName) {
  const response = await axios.get(url, { responseType: "stream" });
  response.data.path = pathName;
  return response.data;
}
