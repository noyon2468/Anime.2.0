// banner3.js (ржмрж╛ржВрж▓рж╛ ржУ Obot Style)

const axios = require("axios"); const fs = require("fs-extra"); const request = require("request");

module.exports.config = { name: "banner3", version: "1.0.0", hasPermssion: 0, credits: "ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж + ChatGPT", description: "рж╕рзНржЯрж╛ржЗрж▓рж┐рж╢ ржПржирж┐ржорзЗ ржмрзНржпрж╛ржирж╛рж░ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рзБржи", commandCategory: "image-edit", usages: "banner3", cooldowns: 5 };

module.exports.run = async function({ api, args, event }) { const linkList = [ "https://imgur.com/7AiLKO5.png", "https://imgur.com/6we7T1g.png", "https://imgur.com/W1TNnj9.png", "https://imgur.com/qZAh20x.png" ]; const images = await Promise.all(linkList.map(async (url) => { const res = await axios.get(url, { responseType: "stream" }); return res.data; }));

return api.sendMessage({ body: ЁЯОи ржирж┐ржЪрзЗрж░ ржмрзНржпрж╛ржирж╛рж░ рж╕рзНржЯрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржерзЗржХрзЗ ржПржХржЯрж┐ ржмрзЗржЫрзЗ ржирж┐ржи\nЁЯФв ржирж╛ржорзНржмрж╛рж░ рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржи, attachment: images }, event.threadID, (err, info) => { global.client.handleReply.push({ step: 1, name: "banner3", author: event.senderID, messageID: info.messageID }); }); };

module.exports.handleReply = async function({ api, event, handleReply }) { if (handleReply.author !== event.senderID) return; const step = handleReply.step;

if (step === 1) { if (isNaN(event.body)) return api.sendMessage("тЫФя╕П рж╕ржВржЦрзНржпрж╛ ржжрж┐ржи ржнрж╛ржЗ...", event.threadID); return api.sendMessage(тЬЕ ржЖржкржирж┐ рж╕рзНржЯрж╛ржЗрж▓ ${event.body} рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзЗржЫрзЗржи!\nЁЯзЩ ржПржмрж╛рж░ ржПржирж┐ржорзЗ ржЪрж░рж┐рждрзНрж░ ржЖржЗржбрж┐ ржжрж┐ржи (рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржи), event.threadID, (err, info) => { global.client.handleReply.push({ step: 2, name: "banner3", author: event.senderID, style: event.body, messageID: info.messageID }); }); }

if (step === 2) { return api.sendMessage(ЁЯзСтАНЁЯОи ржЖржкржирж┐ ржЪрж░рж┐рждрзНрж░ ржЖржЗржбрж┐: ${event.body} ржжрж┐рзЯрзЗржЫрзЗржи\nржПржмрж╛рж░ ржорзЗржЗржи ржирж╛ржо ржжрж┐ржи (рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржи), event.threadID, (err, info) => { global.client.handleReply.push({ step: 3, name: "banner3", author: event.senderID, style: handleReply.style, charID: event.body, messageID: info.messageID }); }); }

if (step === 3) { return api.sendMessage(ЁЯУЫ ржорзЗржЗржи ржирж╛ржо: ${event.body}\nржПржмрж╛рж░ рж╕рж╛ржмржирж╛ржо ржжрж┐ржи (рж░рж┐ржкрзНрж▓рж╛ржЗ ржХрж░рзБржи), event.threadID, (err, info) => { global.client.handleReply.push({ step: 4, name: "banner3", author: event.senderID, style: handleReply.style, charID: handleReply.charID, mainName: event.body, messageID: info.messageID }); }); }

if (step === 4) { return api.sendMessage(ЁЯУЫ рж╕рж╛ржмржирж╛ржо: ${event.body}\nЁЯОи ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржХрж╛рж▓рж╛рж░ ржжрж┐ржи (ржирж╛ ржЪрж╛ржЗрж▓рзЗ "no" рж▓рж┐ржЦрзБржи), event.threadID, (err, info) => { global.client.handleReply.push({ step: 5, name: "banner3", author: event.senderID, style: handleReply.style, charID: handleReply.charID, mainName: handleReply.mainName, subName: event.body, messageID: info.messageID }); }); }

if (step === 5) { const { style, charID, mainName, subName } = handleReply; const color = (event.body.toLowerCase() === "no") ? "#ffffff" : event.body; return api.sendMessage(тЬЕ ржмрзНржпрж╛ржирж╛рж░ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...\nЁЯЦ╝я╕П ржорзЗржЗржи: ${mainName}\nЁЯзй рж╕рж╛ржмржирж╛ржо: ${subName}\nЁЯОи ржХрж╛рж▓рж╛рж░: ${color}, event.threadID, async () => { // ржПржЦрж╛ржирзЗ рждрзБржорж┐ image edit рж▓ржЬрж┐ржХ ржмрж╕рж╛ржмрзЗ, ржЙржкрж░рзЗрж░ ржХрзЛржб ржерзЗржХрзЗржЗ reuse ржХрж░рждрзЗ ржкрж╛рж░рзЛ // рж╢рзЗрж╖рзЗ image path ржжрж┐рзЯрзЗ return api.sendMessage({ body: тЬЕ ржмрзНржпрж╛ржирж╛рж░ рж░рзЗржбрж┐! тЬи\nЁЯУ╕ рждрзИрж░рж┐рждрзЗ рж╕рж╣рж╛рзЯрждрж╛: Obot ЁЯСд Owner: ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж, attachment: fs.createReadStream("path/to/final-banner.png") }, event.threadID); }); } };

  
