module.exports.config = {
	name: "rule",
	version: "2.0.0",
	hasPermssion: 0,
	credits: "ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж + ChatGPT",
	description: "ржЧрзНрж░рзБржкрзЗрж░ ржирж┐рзЯржорж╛ржмрж▓рзА рж╕ржВрж░ржХрзНрж╖ржг, ржжрзЗржЦрж╛ржирзЛ, ржорзБржЫрзЗ ржлрзЗрж▓рж╛",
	commandCategory: "ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬ",
	usages: "[add/remove/all] [ржирж┐рзЯржо ржмрж╛ ржЖржЗржбрж┐]",
	cooldowns: 5,
	dependencies: {
		"fs-extra": "",
		"path": ""
	}
};

module.exports.onLoad = () => {
	const { existsSync, writeFileSync } = global.nodemodule["fs-extra"];
	const { join } = global.nodemodule["path"];
	const filePath = join(__dirname, "cache", "rules.json");
	if (!existsSync(filePath)) writeFileSync(filePath, "[]", "utf-8");
};

module.exports.run = ({ event, api, args, permssion }) => {
	const { threadID, messageID } = event;
	const { readFileSync, writeFileSync } = global.nodemodule["fs-extra"];
	const { join } = global.nodemodule["path"];
	const filePath = join(__dirname, "cache", "rules.json");

	const input = args.slice(1).join(" ");
	let data = JSON.parse(readFileSync(filePath, "utf-8"));
	let currentGroup = data.find(i => i.threadID == threadID) || { threadID, listRule: [] };

	switch (args[0]) {
		case "add": {
			if (permssion == 0) return api.sendMessage("тЪая╕П ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржирж┐рзЯржо ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░ржЫрзЗржи ржирж╛ред", threadID, messageID);
			if (!input) return api.sendMessage("ЁЯУМ ржжржпрж╝рж╛ ржХрж░рзЗ ржпрзБржХрзНржд ржХрж░рждрзЗ ржПржХржЯрж┐ ржирж┐рзЯржо рж▓рж┐ржЦрзБржиред", threadID, messageID);

			const newRules = input.split("\n");
			for (const rule of newRules) currentGroup.listRule.push(rule);

			api.sendMessage("тЬЕ ржирждрзБржи ржирж┐рзЯржо рж╕ржлрж▓ржнрж╛ржмрзЗ ржпрзБржХрзНржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред", threadID, messageID);
			break;
		}

		case "remove":
		case "rm":
		case "delete": {
			if (permssion == 0) return api.sendMessage("тЪая╕П ржЖржкржирж╛рж░ ржПржЗ ржирж┐рзЯржо ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЕржирзБржорждрж┐ ржирзЗржЗред", threadID, messageID);

			if (input === "all") {
				currentGroup.listRule = [];
				api.sendMessage("ЁЯЧСя╕П рж╕ржорж╕рзНржд ржирж┐рзЯржо ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗред", threadID, messageID);
				break;
			}

			const index = parseInt(input);
			if (isNaN(index) || index < 1 || index > currentGroup.listRule.length)
				return api.sendMessage("тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╕ржарж┐ржХ ржирж┐рзЯржо ржиржорзНржмрж░ рж▓рж┐ржЦрзБржи ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржпред", threadID, messageID);

			currentGroup.listRule.splice(index - 1, 1);
			api.sendMessage(`тЬЕ ржирж┐рзЯржо ржиржорзНржмрж░ ${index} рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗред`, threadID, messageID);
			break;
		}

		case "list":
		case "all": {
			if (currentGroup.listRule.length == 0)
				return api.sendMessage("тЪая╕П ржПржЗ ржЧрзНрж░рзБржкрзЗ ржПржЦржиржУ ржХрзЛржи ржирж┐рзЯржо ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯржирж┐ред", threadID, messageID);

			let msg = "ЁЯУЪ ржПржЗ ржЧрзНрж░рзБржкрзЗрж░ ржирж┐рзЯржорж╛ржмрж▓рзА:\n\n";
			currentGroup.listRule.forEach((rule, i) => {
				msg += `${i + 1}. ${rule}\n`;
			});
			msg += `\n\nтЪая╕П ржирж┐рзЯржо ржорзЗржирзЗ ржЪрж▓рзБржи, рж╕рзБржирзНржжрж░ ржЧрзНрж░рзБржк ржмржЬрж╛рзЯ рж░рж╛ржЦрзБржи!\nтАФ ржирзВрж░ ржорзЛрж╣рж╛ржорзНржоржж`;
			api.sendMessage(msg, threadID, messageID);
			break;
		}

		default: {
			if (currentGroup.listRule.length == 0)
				return api.sendMessage("тЪая╕П ржПржЗ ржЧрзНрж░рзБржкрзЗ ржПржЦржиржУ ржХрзЛржи ржирж┐рзЯржо ржирзЗржЗред\nржирж┐рзЯржо ржпрзЛржЧ ржХрж░рждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:\nтЖТ rule add [ржирж┐рзЯржо]", threadID, messageID);

			let msg = "ЁЯУЪ ржЧрзНрж░рзБржкрзЗрж░ ржмрж░рзНрждржорж╛ржи ржирж┐рзЯржо:\n\n";
			currentGroup.listRule.forEach((rule, i) => {
				msg += `${i + 1}. ${rule}\n`;
			});
			msg += `\nтЬЕ ржирж┐рзЯржо ржжрзЗржЦрждрзЗ ржмрж╛ ржорзБржЫрждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:\nтЖТ rule all\nтЖТ rule remove [ржиржорзНржмрж░]`;
			api.sendMessage(msg, threadID, messageID);
		}
	}

	if (!data.some(i => i.threadID == threadID)) data.push(currentGroup);
	writeFileSync(filePath, JSON.stringify(data, null, 4), "utf-8");
};
